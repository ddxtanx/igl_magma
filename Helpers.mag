debug := true;

debugLog := procedure(str)
    if debug then
        str;
    end if;
end procedure;

// Factors the columns of the matrix w/o dividing by 3. 
// Used to make the Ker presentation of minimal complexity
FactorMatrixCols := function(mat)
    scale_list := [];
    threeAdics := pAdicRing(3);
    for i in [1 .. NumberOfColumns(mat)] do
        ithCol := ColumnSubmatrix(mat, i, 1);
        colElemList := Eltseq(ithCol);
        colElemList := [(Integers() ! v) : v in colElemList];
        gcd := Gcd(colElemList);
        val := Valuation(threeAdics ! gcd);
        if val gt 0 then
            "We have 3 torsion!";
        end if;
        gcd := gcd / (3^val);
        Append(~scale_list, 1/gcd);
    end for;
    scale_mat := DiagonalMatrix(Rationals(), scale_list);
    debugLog(mat);
    debugLog(mat*scale_mat);
    return mat * scale_mat;
end function;

// Factors the rows of a matrix w/o dividing by 3
// Used in making KernelMatrix of minimal complexity
FactorMatrixRows := function(mat)
    scale_list := [];
    threeAdics := pAdicRing(3);
    for i in [1 .. NumberOfRows(mat)] do
        ithCol := RowSubmatrix(mat, i, 1);
        colElemList := Eltseq(ithCol);
        colElemList := [(Integers() ! v) : v in colElemList];
        gcd := Gcd(colElemList);
        val := Valuation(threeAdics ! gcd);
        gcd := gcd / (3^val);
        Append(~scale_list, 1/gcd);
    end for;
    scale_mat := DiagonalMatrix(Rationals(), scale_list);
    debugLog(mat);
    debugLog(scale_mat*mat);
    return scale_mat*mat;
end function;

EnsureNoColDivByThree := function(matrix, ring)
    scale_list := [];
    threeAdics := pAdicRing(3);
    for i in [1 .. NumberOfColumns(matrix)] do 
        ithCol := ColumnSubmatrix(matrix, i, 1);
        colElemList := Eltseq(ithCol);
        denomElemList := [Denominator(Rationals() ! v) : v in colElemList];
        gcd := Lcm(denomElemList);
        val := Valuation(threeAdics ! gcd);
        Append(~scale_list, ring ! 3^val);
    end for;
    scale_mat := DiagonalMatrix(ring, scale_list);
    debugLog(matrix);
    debugLog(matrix*scale_mat);
    return matrix*scale_mat;
end function;