import "/Applications/Magma/package/Geometry/ModFrm/operators.m":
    get_Wq; // "Quick" computations of atkin lehner operators
            // It's actually slow af, if we can speed this up that would be
            // super great!
            
import "ModularFormLinearAlgebra.mag":
    TransformBasis,
    BasisExpand,
    ChangeOfBasis;

debug := false;

// Tool used to provide debug message if debug = true;
debugLog := procedure(str)
    if debug then
        str;
    end if;
end procedure;

GenerateWQ := function(w)
    space := ModularForms(2, w);
    wq := get_Wq(space, 2);

    return wq;
end function;
//This function takes in a matrix M : V -> W and a basis of V
//It returns a modified basis of V compatible with the smith normal form, as well as
//the order related to the basis element in a pair
SNFToOrdersAndBasis := function(M, basis) 
    M := ChangeRing(M, loc<Integers() | 3>);
    S, P, Q := SmithForm(M);

    orderAndBasis := [];
    snfBasis := TransformBasis(Transpose(Q), basis);
    dim := Minimum([NumberOfColumns(S), NumberOfRows(S)]);
    for i in [1 .. dim] do
    order := Truncate(Rationals() ! S[i,i]);
        Append(~orderAndBasis, <order, snfBasis[i]>);
    end for;
    for i in [dim + 1 .. #basis] do
        Append(~orderAndBasis, <0, snfBasis[i]>);
    end for;

    return orderAndBasis;
end function;

OrderAndBasisToGroupString := function(orderBasis : underlyingRing := "Z_3")
    str := "";
    for pair in orderBasis do
        order := pair[1];
        if order eq 0 then
            str := str cat " " cat underlyingRing cat " x";
        elif order ne 1 then
            str := str cat " " cat underlyingRing cat " / " cat Sprint(order) cat " " cat underlyingRing cat " x";
        end if;
    end for;
    if str eq "" then
        return "{e}";
    end if;
    return str[2 .. #str-2];
end function;


// This returns the pAdicValuation of a number n without calling pAdicRing(3) ! which loses precision.
function Val(n, p)
    if n eq 0 then
        return -1;
    end if;
    if "Rational Field" in Sprint(Parent(n)) then
        n := Rationals() ! n;
        return Val(Numerator(n),p) - Val(Denominator(n),p); 
    end if;
    val := 0;
    while (n mod p) eq 0 do
        n := Truncate(n/p);
        val := val + 1;
    end while;
    return val;
end function;
