import "/Applications/Magma/package/Geometry/ModFrm/operators.m":
    get_Wq; // "Quick" computations of atkin lehner operators
            // It's actually slow af, if we can speed this up that would be
            // super great!
import "ModularFormLinearAlgebra.mag":
    BasisExpand,
    ChangeOfBasis,
    TransformBasis;

import "Helpers.mag":
    debugLog,
    SNFToOrdersAndBasis;

import "ModularForms.mag":
    Psi,
    ComputeC4C6Basis,
    ComputeQ2Q4Basis,
    q2,
    q4,
    Delta,
    c4,
    c6,
    IsModular,
    PsiDP1Inv,
    NormalizeForm;

// This computes the relations matrix for something to be in the kernel of (psis - 1 + phif)
KernelMatrix := function(weight, ring : wq := -1)
    //"Computed M_" cat IntegerToString(weight) cat "(Gamma_0(2)) Space";
    FormSpace := BaseExtend(ModularForms(2,weight), Rationals());
    debugLog("KERMAT: Computing basis");
    basis := ComputeQ2Q4Basis(weight);
    //"Computed Basis";
    dim := #basis;
    //"Computed Dimension";
    half_weight := ring ! (2^(Truncate(weight/2)));
    //"Computed Half Weight";
    power_weight := ring ! half_weight*half_weight;
    //"Computed Weight";
    //This computation of the dual basis takes the longest amount of time!
    debugLog("KERMAT: Getting WQ");
    if wq eq -1 then
        wq := get_Wq(FormSpace, 2);
    end if;
    debugLog("KERMAT: Computing dual basis");
    dual_basis := [ Psi(f : wq := wq) : f in basis];
    //dual_basis := [];

    //"Computed dual of the basis!";
    CoefRing := PolynomialRing(ring, dim); // Coefficient ring for x1 ... xDim
    //AssignNames(~CoefRing, CreateBasisString(dim));
    eqns := [];

    // We now attempt to get a system of equations using the constraining equation
    // 2^w * (f(tau) - f(2tau) - psi(f)(2tau)) + psi(f)(tau) = 0
    // Expanding f into the basis of q2q4 forms we represent f as 
    // f = sum x_i (q2q4)_i
    // psi(f) = sum x_i (psi(q2q4_i))
    //
    debugLog("KERMAT: Computing equations");
    for i in [0 .. dim-1] do // We need dim equations, which we get from the [0 .. dim - 1] degree q-expansion coefficients
        expr := 0; // We build up the i'th degree expression basis element by basis element
        for n in [1 .. dim] do // Loop over the basis elements
            f_n := basis[n]; //nth basis element
            var := CoefRing . n; // Represents the xi term in the basis expension
            dual_f_n := dual_basis[n];
            // We now get the following coefficients to compute
            ith_coef_f := CoefRing ! Coefficient(f_n, i); // f(tau)_i
            ith_coef_f_dual := CoefRing ! Coefficient(dual_f_n, i); // psi(f)(tau)_i
            i2th_coef_f := 0; // If i is odd, f(2tau)_i is zero
            i2th_coef_f_dual := 0; // similar to above
            if (i mod 2) eq 0 then
                half_i := Truncate(i/2);
                i2th_coef_f := CoefRing ! Coefficient(f_n, half_i); // f(2tau)_i
                i2th_coef_f_dual := CoefRing ! Coefficient(dual_f_n, half_i); // psi(f)(2tau)_i
            end if;
            sub_expr := var*(power_weight*(ith_coef_f
                            - i2th_coef_f
                            - i2th_coef_f_dual)
                            + ith_coef_f_dual); 
            // This represents x_i * (the constraining equation applied to (q2q4)_n at the i'th q expansion coefficient)
            /*if i eq 1 then
                "The " cat IntegerToString(n) cat "th basis element:";
                f_n;
                "The first coef of the " cat IntegerToString(n) cat "th basis element:";
                ith_coef_f;
                "The second coef of the " cat IntegerToString(n) cat "th basis element:";
                i2th_coef_f;
                "The " cat IntegerToString(n) cat "th basis element dual:";
                dual_f_n;
                "The first coef of the " cat IntegerToString(n) cat "th basis element dual:";
                ith_coef_f_dual;
                "The second coef of the " cat IntegerToString(n) cat "th basis element dual:";
                i2th_coef_f_dual;
                "The " cat IntegerToString(n) cat "th expr:";
                sub_expr;
            end if;*/
            expr := expr + sub_expr; // Build the expression up as a sum
        end for;
        eqns := Append(eqns, expr); // Once the expression is built up, add it to the matrix
    end for;
    //"Computed Equations";

    // This now parses the equations into matrix form, as all the terms are linear
    debugLog("KERMAT: Parsing eqns to matrix");
    mat_list := [];
    for eqn in eqns do
        coefs := [];
        for i in [1 .. dim] do
            var := CoefRing.i;
            coef := LeadingCoefficient(Coefficient(eqn, var, 1));
            coefs := Append(coefs, ring ! coef);
        end for;
        mat_list := Append(mat_list, coefs);
    end for;
    mat := Matrix(mat_list);
    return mat;
end function;

// This returns the basis for the Kernel at the given weight
// i.e. a matrix s.t. the columns give the coefficients (in the 
// Q2Q4 basis for the given weight) of the elements that span the kernel
Ker := function(weight, ring : wq := -1) 
    debugLog("KER: Computing Kernel Matrix");
    mat := KernelMatrix(weight, ring : wq := wq);
    debugLog("KER: Computing SNF");
    S, P, Q := SmithForm(mat); // The smith form of the relation matrix gives a canonical way to view this kernel
    // To find the kernel, we extract all of the columns of the Q matrix that
    // Correspond to a zero invariant factor in the SNF matrix, which represents
    // The basis matrix of the kernel
    i := 1;
    diagElems := [];
    debugLog("KER: Getting Diag Elems");
    // The following parses the invariant factors into a nice list
    for row in RowSequence(S) do
        diagElem := row[i];
        diagElems := Append(diagElems, row[i]);
        i := i+1;
    end for;
    debugLog("KER: Getting nonzero vecs");
    // Now it searches for the first index where the invariant factor is zero
    first0Index := 1;
    while diagElems[first0Index] ne 0 do
        first0Index := 1 + first0Index;
    end while;
    // We take out common factors to make the basis as simple as possible
    qiScale := Q;
    debugLog("KER: Returning submatrix");
    dim := NumberOfRows(qiScale);
    // We extract the columns corresponding to zero invariant factors
    submat := Submatrix(qiScale, 1, first0Index, dim, (dim - first0Index+1));
    // We take the column-echelon form of the basis matrix which 
    // ensures that the basis returned is linearly independent.
    R := loc<Integers() | 3>;
    submat := ChangeRing(submat, R);
    submatT := Transpose(EchelonForm(Transpose(submat)));
    submat := ChangeRing(submat, ring);
    // We get the basis that submat is w.r.t
    debugLog("KER: Computing Q2Q4 Basis");
    basis := ComputeQ2Q4Basis(weight);
    if Sprint(BaseRing(basis[1])) ne Sprint(ring) then
        RFS, phi := BaseExtend(Parent(basis[1]), ring);
        basis := [phi(f) : f in basis];
    end if;
    kernel_basis := TransformBasis(Transpose(submat), basis);
    // const_terms := [];
    // // We now combine the kernel basis with the canonical basis to get 
    // // the basis of forms for the kernel
    // debugLog("KER: Expanding Ker Computation");
    // for i in [1 .. NumberOfColumns(submat)] do
    //     ithCol := ColumnSubmatrix(submat, i, 1);
    //     form := (Parent(basis[1]) ! 0); 
    //     const_term := 0;
    //     debugLog("KER: Adding forms");
    //     for j in [1 .. NumberOfRows(ithCol)] do
    //         form := form + basis[j]*ithCol[j][1];
    //         const_term := const_term + ithCol[j][1];
    //     end for;
    //     // There's a nice congruence that all of the forms in 
    //     // the q2q4 basis have their non-constant terms divisible by 4
    //     // so if the constant term of the form is divisible by 4
    //     // then the whole modular form is divisible by 4
    //     if Numerator(Rationals() ! const_term) mod 4 eq 0 then
    //         form := 1/4 * form;
    //     end if;
    //     if form eq (Parent(form) ! 0) then
    //         continue;
    //     end if;
    //     Append(~kernel_basis, form);
    //     Append(~const_terms, const_term);
    // end for;
    // // We return the matrix basis as well as the basis of modular forms
    // // debugLog("KER: Computing linearly independent subset");
    // // debugLog("KER: Computing COB");
    // // M := ChangeOfBasis(basis, kernel_basis);
    // // debugLog("KER: Computing Echelon form");
    // // EF := EchelonForm(M);
    // // actual_basis := [];
    // // for n in [1 .. NumberOfRows(EF)] do
    // //     if NumberOfNonZeroEntries(RowSubmatrix(EF, n, 1)) ne 0 then
    // //         Append(~actual_basis, kernel_basis[n]);
    // //     end if;
    // // end for;
    return kernel_basis;
end function;

//c4 = 16*(q2^2 - 3 q4) = E4!!!
//c6 = -64q2^3 +9*32*q2*q4 = 32*(9*q2*q4-2*q2^3) = E6!!!

InKer := function(f : wq := -1)
    return IsModular(Psi(f : wq := wq)+f : wq := wq);
end function;

KernelSubBasis := function(weight : wq := -1)
    if wq eq -1 then
        space := ModularForms(2, weight);
        wq := get_Wq(space, 2);
    end if;
    S2 := BaseExtend(ModularForms(2,2), Rationals());
    E22 := S2.1;

    S4 := BaseExtend(ModularForms(2,4), Rationals());
    E4P := S4.1;
    EI4 := S4.2;

    q2 := 1/2 * E22;
    q4 := 1/16*E4P - EI4;   

    c4 := 16*(q2^2 - 3*q4);
    c6 := 32*(9*q2*q4-2*q2^3);
    Delta := q4^2 * (16*q2^2 - 64*q4);
    basis := [];
    fourth := Truncate(weight/4); // c4's powers range from 0 to floor(weight / 4)
    sixth := Truncate(weight/6); // Computing c6's power requires access to 1/6
    debugLog("SubBasis: Beginning loop");
    for i in [0 .. fourth] do
        for j in [0 .. sixth] do
            pre_factor := 1;
            fac_1 := 1;
            fac_2 := 1;
            fac_3 := 1;
            remainder := weight - 4*i - 6*j;

            if (remainder mod 12) ne 0 or remainder lt 0 then
                continue;
            end if;
            if i ne 0 then // We need these if statements because MAGMA is weird about f^0
                fac_1 := c4^i;
            end if;
            if j ne 0 then 
                fac_2 := c6^j;
            end if;

            k := Truncate(remainder/12);
            if k ne 0 then
                fac_3 := Delta^k;
            end if;
            debugLog("SubBasis: Multiplying forms");
            form := fac_1 * fac_2 * fac_3;
            smallestCoef := LeadingCoefficient(qExpansion(form));
            formScaled := (1/smallestCoef) * form;
            coef_power := 1;
            if k ne 0 then 
                coef_power := Valuation(pAdicRing(3) ! weight) + 1;
            else
                coef_power := Maximum(0, Valuation(pAdicRing(3) ! weight) - Valuation(pAdicRing(3) ! i) - 1);
            end if;
            inInverseForm := 3^coef_power * formScaled;
            basis_form := PsiDP1Inv(inInverseForm : wq := wq);
            basis := Append(basis, basis_form);
        end for;
    end for;
    return basis;
end function;
// Denom seq for c4tilde powers: 1, 17, 91, 4369, 1271, 13981

ImageBasis := function(weight : wq := -1)
    debugLog("IMAGE: Computing C4C6 Basis");
    basis := ComputeC4C6Basis(weight);
    power := Truncate(weight/2);
    coef := 1;
    debugLog("IMAGE: Computing Psi - 1 of basis");
    psi_minus := [coef*(Psi(f : wq := wq) - f) : f in basis];
    psi2 := [(2^(weight) - 1) * form : form in basis];
    return psi_minus, psi2;
end function;


// This function returns the homology group at a given weight w.
// Parameters: weight, an even integer >= 4 representing the weight of the
// forms we compute at.
// Returns: A pair of two lists, each of which have elements of the form
//          <order, generator> representing the fact that the group is Z_3 / order Z_3 generated
//          by generator.
//          The first of the pair is for the MF0(2) factor, and the second part is for the MF factor.
Homology := function(weight)
    debugLog("HOMOLOGY: Calculating wq");
    space := ModularForms(2, weight);
    wq := get_Wq(space, 2);
    debugLog("HOMOLOGY: Calculating kernel basis");
    kerBasis := Ker(weight, pAdicRing(3) : wq := wq);
    psidBasis := [];
    for f in kerBasis do
        Append(~psidBasis, Psi(f : wq := wq) + f);
    end for;

    debugLog("HOMOLOGY: Calculating image basis");
    imBasis1, imBasis2 := ImageBasis(weight : wq := wq);


    debugLog("HOMOLOGY: Calculating COB Matrix");
    M1 := ChangeOfBasis(kerBasis, imBasis1);
    M2 := ChangeOfBasis(psidBasis, imBasis2);
     
    R := pAdicRing(3);
    M1 := ChangeRing(M1, R);
    M2 := ChangeRing(M2, R);

    debugLog("HOMOLOGY: Calculating SNF of COB Mat");
    S1, _, _ := SmithForm(M1);
    S1 := ChangeRing(S1, Rationals());

    S2, _, _ := SmithForm(M2);
    S2 := ChangeRing(S2, Rationals());

    l1 := SNFToOrdersAndBasis(M1, kerBasis);
    l2 := SNFToOrdersAndBasis(M2, psidBasis);
    
    l1Filtered := [];
    l2Filtered := [];

    for pair in l1 do
        order := pair[1];
        if order ne 1 then
            Append(~l1Filtered, pair);
        end if;
    end for;

    for pair in l2 do
        order := pair[1];
        if order ne 1 then
            Append(~l2Filtered, pair);
        end if;
    end for;

    return l1Filtered, l2Filtered;
end function;